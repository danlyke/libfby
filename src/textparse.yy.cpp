#line 2 "textparse.yy.cpp"

#line 4 "textparse.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int TextParse::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 36
#define YY_END_OF_BUFFER 37
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[397] =
    {   0,
        4,    4,    4,    4,    0,    0,    0,    0,   21,   21,
        0,    0,   24,   24,   21,   21,   30,   30,   32,   32,
        0,    0,   37,    4,    4,    5,    5,   36,    4,    4,
        5,   36,    5,   36,    4,    4,    5,   21,   36,   25,
       22,   23,   24,   36,   21,   27,   28,   30,   29,   36,
       30,   30,   32,   31,   32,   32,   14,   15,   14,   14,
       15,    4,    4,    0,    4,    4,    1,    0,    0,    3,
        3,    4,    0,   19,    0,    4,    4,    4,   12,   21,
       26,   22,   24,    0,   27,   28,   21,   30,   30,   30,
       30,   32,   32,   32,   32,   14,   14,   14,   14,   13,

        0,    0,    0,   33,    3,    3,    2,    0,   19,    0,
        0,    0,    0,    4,    4,    4,   30,   30,   30,   32,
       32,   32,   14,   14,   14,   34,    0,    2,    0,    0,
       20,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    4,    4,   30,   30,   30,   32,   32,   32,   14,
       14,   14,   35,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    4,    4,   30,   30,
       30,   32,   32,   32,   14,   14,   14,    6,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    6,
        0,    0,    0,    4,   30,   30,   30,   32,   32,   32,

       14,   14,   14,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    4,   30,   30,   30,   32,   32,   32,   14,   14,
       14,    7,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    7,    0,    0,    0,
        0,   30,   30,   30,   32,   32,   32,   14,   14,   14,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   30,
       30,   30,   32,   32,   32,   14,   14,   14,    8,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   30,   30,   30,   32,   32,   32,   14,   14,
       14,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   30,   30,   30,   32,   32,   32,   14,
       14,   14,    9,    0,    0,    0,    0,    0,    0,    0,
        0,   16,    0,   30,   16,   30,   32,   16,   32,   14,
       14,   14,    0,    0,    0,    0,    0,    0,    0,   30,
       30,   32,   32,   14,   14,   10,    0,    0,    0,   17,
       30,   17,   32,   17,   14,   14,    0,    0,    0,   30,
       32,   14,   11,    0,   30,   32,   14,    0,   30,   32,
       14,   18,   18,   18,   14,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    6,    1,    7,    8,    1,    1,    9,   10,    1,
        1,   11,    1,    1,   12,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   13,   16,   17,
       18,   19,    1,    1,   20,   21,   22,   23,   24,   21,
       21,   25,   26,   21,   21,   21,   27,   28,   21,   21,
       21,   29,   21,   30,   31,   21,   21,   32,   33,   21,
       34,   35,   36,    1,   37,    1,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   38,   21,   21,   21,   21,   39,
       21,   21,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[40] =
    {   0,
        1,    2,    3,    2,    2,    2,    4,    5,    6,    7,
        8,    1,    1,    9,   10,   11,    8,   12,   13,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,    8,   15,   16,    8,   14,   14
    } ;

static yyconst flex_int16_t yy_base[430] =
    {   0,
        0,    0,   22,   23,    0,    0,    0,    0,   57,    0,
        0,    0,   83,   85,  122,  131,  133,  137,  138,  142,
      146,  150,  649,    0,  186,  645,  639,   40,   43,  103,
      632, 1332, 1332,  627,  224,  247,  610,   49,  624, 1332,
        0, 1332,  604,  100,  277, 1332, 1332,    0, 1332,  633,
      616,   80,    0, 1332,  615,   86,    0, 1332,  608,   88,
      595,    0,    0,  116,  137,  100,  627,  115,  613,    0,
        0,  143,    0,    0,  286,  149,  133,  200, 1332,  235,
     1332,    0,  590,  169, 1332, 1332,    0,    0,  595,  599,
      598,    0,  592,  596,  595,    0,  583,  587,  586, 1332,

       28,    0,  596, 1332,    0,    0,    0,  303,    0,  593,
      321,  240,  338,  355,  208,  230,  573,  585,  584,  570,
      582,  581,  567,  579,  578, 1332,  585,    0,  581,  391,
     1332,  581,  580,  409,  426,  579,  578,  443,  460,  477,
      567,  232,  237,  566,  570,  560,  560,  564,  557,  556,
      560,  553, 1332,  576,   95,  560,  559,  494,  511,  558,
      557,  556,  528,  545,  562,  542,  579,  203,  541,  534,
      544,  538,  525,  535,  529,  522,  532, 1332,  539,  186,
      244,  538,  537,  615,  632,  536,  535,  534,  649,  666,
      683,  518,  520,  254,  516,  518,  519,  513,  515,  516,

      510,  512,  513,  525,  253,  509,  508,  507,  506,  505,
      700,  717,  504,  734,  503,  502,  751,  768,  785,  495,
      490,  802,  487,  482,  472,  484,  479,  469,  481,  476,
      466, 1332,  484,  283,  292,  483,  476,  475,  474,  473,
      838,  855,  472,  471,  470,  872,  889,  469,  457,  455,
      460,  448,  446,  451,  445,  443,  448,  442,  440,  445,
      465,  293,  449,  442,  441,  440,  439,  438,  437,  436,
      906,  923,  435,  940,  434,  294,  425,  424,  415,  416,
      415,  412,  413,  412,  409,  410,  409,  406, 1332,  415,
      295,  296,  408,  407,  406,  405,  404,  403,  402,  397,

      388,  387,  394,  379,  378,  385,  376,  375,  382,  373,
      372,  398,  297,  382,  381,  380,  373,  372,  371,  299,
      351,  354,  360,  348,  351,  357,  345,  348,  354,  342,
      345,  351, 1332,  358,  300,  313,  357,  356,  355,  354,
      347, 1332,  340,  345,    0,  335,  340,    0,  333,  338,
        0,  330,  356,  316,  340,  337,  317,  326,  320,  324,
      318,  321,  315,  319,  305, 1332,  319,  318,  264, 1332,
      263,    0,  247,    0,  245,    0,  269,  327,  243,  225,
      207,  177, 1332,  165,  155,  154,  153,  124,  123,  117,
       79, 1332,    0,    0,    0, 1332,  958,  974,  990, 1006,

     1022,  259,  256,  318, 1037, 1044, 1060, 1076, 1082, 1096,
     1112,   39,  319, 1128,  336, 1144, 1159, 1172, 1184, 1199,
     1211, 1223, 1238, 1250, 1265, 1277, 1292, 1304, 1319
    } ;

static yyconst flex_int16_t yy_def[430] =
    {   0,
      396,    1,    1,    1,  397,  397,  397,  397,  396,    9,
      397,  397,  397,  397,  397,  397,  398,  398,  399,  399,
      400,  400,  396,  401,  396,  396,  402,  396,  401,   25,
      403,  396,  396,  396,   25,   25,  396,  396,  396,  396,
      404,  396,  396,  405,  396,  396,  396,  406,  396,  402,
      406,  406,  407,  396,  407,  407,  408,  396,  408,  408,
      396,  401,   25,  396,  401,   36,  396,  396,  409,  410,
      411,  401,  412,  413,  414,   36,   36,   36,  396,  396,
      396,  404,  396,  405,  396,  396,   45,  406,  406,  406,
      406,  407,  407,  407,  407,  408,  408,  408,  408,  396,

      396,  415,  409,  396,  410,  411,  416,  417,  413,  418,
      414,  414,  419,   25,   36,   36,  406,  406,  406,  407,
      407,  407,  408,  408,  408,  396,  415,  416,  420,  417,
      396,  418,  396,  414,  414,  418,  421,  419,  419,  422,
      396,   36,   36,  406,  406,  406,  407,  407,  407,  408,
      408,  408,  396,  396,  396,  421,  396,  419,  419,  421,
      421,  423,  422,  422,  424,  396,   25,   36,  406,  406,
      406,  407,  407,  407,  408,  408,  408,  396,  396,  396,
      396,  423,  396,  422,  422,  423,  423,  425,  424,  424,
      426,  396,  396,   36,  406,  406,  406,  407,  407,  407,

      408,  408,  408,  396,  396,  396,  396,  396,  425,  396,
      424,  424,  425,  424,  425,  427,  426,  426,  428,  396,
      396,   25,  406,  406,  406,  407,  407,  407,  408,  408,
      408,  396,  396,  396,  396,  396,  396,  396,  427,  396,
      426,  426,  427,  427,  429,  428,  428,  429,  396,  396,
      396,  406,  406,  406,  407,  407,  407,  408,  408,  408,
      396,  396,  396,  396,  396,  396,  396,  396,  429,  396,
      428,  428,  429,  428,  429,  396,  396,  396,  396,  406,
      406,  406,  407,  407,  407,  408,  408,  408,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,

      396,  396,  406,  406,  406,  407,  407,  407,  408,  408,
      408,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  406,  406,  406,  407,  407,  407,  408,
      408,  408,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  406,  406,  406,  407,  407,  407,  408,
      408,  408,  396,  396,  396,  396,  396,  396,  396,  406,
      406,  407,  407,  408,  408,  396,  396,  396,  396,  396,
      406,  406,  407,  407,  408,  408,  396,  396,  396,  406,
      407,  408,  396,  396,  406,  407,  408,  396,  406,  407,
      408,  396,  406,  407,  408,    0,  396,  396,  396,  396,

      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396
    } ;

static yyconst flex_int16_t yy_nxt[1372] =
    {   0,
       24,   25,   26,   24,   24,   25,   24,   24,   27,   24,
       28,   29,   24,   24,   30,   24,   31,   32,   24,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   33,   24,   24,   33,   30,   30,   34,
       34,   70,  101,  126,   71,   70,   35,   35,   71,   36,
       36,   80,  108,   80,   80,   37,   37,   32,   32,   38,
       32,   38,   38,   32,   32,   32,   32,   32,   32,   32,
       39,   32,   32,   32,   32,   40,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       32,   32,   32,   32,   41,   41,   39,  178,   39,   90,

       42,   40,   42,   40,   62,   94,   85,   98,   62,   86,
       91,  395,  154,  396,   62,   72,   95,   70,   99,   66,
       43,   70,   43,   44,   45,   44,   45,   45,   46,  101,
       66,   47,   44,   45,   44,   45,   45,   46,   71,   49,
       47,   50,   71,   49,  107,   50,   50,   54,  107,  394,
       50,   54,   66,  102,   58,  393,  392,   51,   58,  115,
       52,   51,   55,   66,   52,   56,   55,   32,   66,   56,
       59,   32,   32,   60,   59,   85,   32,   60,   86,   66,
      114,   61,  391,  390,  389,   61,   62,   63,  178,   62,
       62,   63,   62,   62,  388,   62,   64,   65,   62,   62,

       66,   62,  387,  205,   62,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       62,   62,   66,   66,   66,   62,  116,   66,  194,   62,
       66,  142,  386,   66,  396,   62,   72,   80,   66,   80,
       80,  111,  112,  111,  111,  111,  178,   76,   62,   66,
      385,   66,   62,  143,  167,  232,   66,  396,   62,   72,
       66,  179,   66,   69,   74,  168,   77,   66,  384,   74,
      204,  383,   69,   66,  382,  222,  381,   78,   84,   87,
       84,   87,   87,   85,   66,  232,   86,  111,  112,  111,
      111,  111,  380,  379,  232,  289,  289,  289,  289,  333,

      262,  333,  333,  113,  129,  129,  129,  129,  129,  233,
      261,  299,  313,  290,  312,  333,  340,  354,  366,  366,
      366,  131,  134,  135,  134,  134,  134,   82,  109,  383,
      334,   82,  109,  353,  367,  378,  377,  376,  136,  138,
      139,  138,  138,  138,  377,  127,  375,  374,  373,  127,
      372,  371,  370,  369,  368,  140,   62,  367,  366,  365,
       62,  364,  363,  362,  361,  396,   62,   72,  360,  359,
      358,  357,  340,  356,  355,  353,  352,  351,  350,  349,
      348,  347,  346,  345,  344,  343,  342,  341,  339,  338,
      337,  141,  129,  129,  129,  129,  129,  336,  335,  334,

      333,  332,  331,  330,  329,  328,  327,  326,  325,  131,
      134,  135,  134,  134,  134,  324,  323,  322,  321,  320,
      319,  318,  317,  316,  315,  314,  136,  134,  135,  134,
      134,  134,  312,  311,  310,  309,  308,  307,  306,  305,
      304,  303,  302,  136,  158,  159,  158,  158,  158,  301,
      300,  298,  297,  296,  270,  295,  294,  293,  292,  291,
      160,  138,  139,  138,  138,  138,  290,  289,  288,  287,
      286,  285,  284,  283,  282,  281,  280,  161,  163,  164,
      163,  163,  163,  279,  278,  277,  276,  270,  268,  267,
      266,  240,  265,  264,  165,  158,  159,  158,  158,  158,

      263,  261,  260,  259,  258,  257,  256,  255,  254,  253,
      252,  160,  158,  159,  158,  158,  158,  250,  249,  240,
      238,  237,  236,  210,  235,  234,  233,  232,  160,  184,
      185,  184,  184,  184,  231,  230,  229,  228,  227,  226,
      225,  224,  223,  221,  220,  186,  163,  164,  163,  163,
      163,  210,  208,  207,  206,  183,  204,  203,  202,  201,
      200,  199,  187,  189,  190,  189,  189,  189,  198,  197,
      196,  195,  192,  183,  181,  180,  179,  157,  178,  191,
       62,  177,  176,  175,   62,  174,  173,  172,  171,  396,
       62,   72,  170,  169,  166,  157,  155,  154,  133,  131,

      153,  152,  151,  150,  149,  148,  147,  146,  145,  144,
      133,  104,  125,  124,  123,  193,  184,  185,  184,  184,
      184,  122,  121,  120,  119,  118,  117,   83,  104,   67,
      100,   97,  186,  184,  185,  184,  184,  184,   93,   89,
       68,   83,   81,   79,   75,   73,   68,   67,  396,  186,
      211,  212,  211,  211,  211,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  213,  189,  214,  189,
      189,  189,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  215,  217,  218,  217,  217,  217,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,

      219,  211,  212,  211,  211,  211,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  213,  211,  212,
      211,  211,  211,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  213,  189,  214,  189,  189,  189,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  215,  241,  242,  241,  241,  241,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  243,  217,
      218,  217,  217,  217,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  244,  246,  247,  246,  246,
      246,  396,  396,  396,  396,  396,  396,  396,  396,  396,

      396,  396,  248,   62,  396,  396,  396,   62,  396,  396,
      396,  396,  396,   62,   72,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  251,  241,
      242,  241,  241,  241,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  243,  241,  242,  241,  241,
      241,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  243,  271,  272,  271,  271,  271,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  273,
      246,  274,  246,  246,  246,  396,  396,  396,  396,  396,

      396,  396,  396,  396,  396,  396,  275,  271,  272,  271,
      271,  271,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  273,  271,  272,  271,  271,  271,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      273,  246,  274,  246,  246,  246,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  275,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   62,   62,  396,   62,   62,  396,   62,  396,
       62,   62,   62,  396,   62,   62,   62,   62,   84,   84,
       84,  396,  396,   84,   88,   88,   88,  396,   88,  396,
       88,   88,   88,   88,   88,   88,   88,   88,  396,   88,
       92,   92,   92,   92,   92,  396,  396,   92,   92,   92,
       92,   92,   92,   92,  396,   92,   96,   96,   96,   96,
       96,  396,   96,   96,   96,   96,   96,   96,   96,   96,
       96,  103,  103,  396,  396,  103,  105,  105,  396,  105,

      105,  396,  105,  396,  105,  105,  105,  396,  105,  105,
      105,  105,  106,  106,  396,  106,  106,  396,  106,  396,
      106,  106,  106,  396,  106,  106,  106,  106,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  128,  128,  396,  128,  128,  396,
      128,  396,  128,  128,  128,  396,  128,  128,  128,  128,
      130,  130,  396,  396,  396,  396,  396,  396,  130,  396,
      396,  130,  130,  132,  132,  396,  396,  396,  396,  396,
      396,  396,  396,  132,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,

      129,  129,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  129,  156,  156,  396,  396,  396,  396,  396,  396,
      396,  396,  156,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  182,
      182,  396,  396,  396,  396,  396,  396,  396,  396,  182,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  209,  209,  396,  396,
      396,  396,  396,  396,  396,  396,  209,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  239,  239,  396,  396,  396,  396,  396,

      396,  396,  396,  239,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      269,  269,  396,  396,  396,  396,  396,  396,  396,  396,
      269,   23,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396
    } ;

static yyconst flex_int16_t yy_chk[1372] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        4,   28,  101,  101,   29,   28,    3,    4,   29,    3,
        4,   38,  412,   38,   38,    3,    4,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   13,  155,   14,   52,

       13,   13,   14,   14,   30,   56,   44,   60,   30,   44,
       52,  391,  155,   30,   30,   30,   56,   64,   60,   66,
       13,   64,   14,   15,   15,   15,   15,   15,   15,   68,
       66,   15,   16,   16,   16,   16,   16,   16,   65,   17,
       16,   17,   65,   18,   72,   18,   19,   19,   72,  390,
       20,   20,   77,   68,   21,  389,  388,   17,   22,   77,
       17,   18,   19,   77,   18,   19,   20,   17,   76,   20,
       21,   18,   19,   21,   22,   84,   20,   22,   84,   76,
       76,   21,  387,  386,  385,   22,   25,   25,  180,   25,
       25,   25,   25,   25,  384,   25,   25,   25,   25,   25,

       25,   25,  382,  180,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   78,
       25,   25,  168,   25,   25,   35,   78,  115,  168,   35,
       78,  115,  381,  168,   35,   35,   35,   80,  115,   80,
       80,  112,  112,  112,  112,  112,  181,   35,   36,  116,
      380,  142,   36,  116,  142,  205,  143,   36,   36,   36,
      116,  181,  142,  402,  403,  143,   36,  143,  379,  403,
      205,  377,  402,  194,  375,  194,  373,   36,   45,   45,
       45,   45,   45,   45,  194,  234,   45,   75,   75,   75,
       75,   75,  371,  369,  235,  262,  276,  291,  292,  313,

      234,  320,  335,   75,  108,  108,  108,  108,  108,  235,
      262,  276,  291,  292,  313,  336,  320,  335,  354,  357,
      368,  108,  111,  111,  111,  111,  111,  404,  413,  378,
      336,  404,  413,  354,  357,  368,  367,  365,  111,  113,
      113,  113,  113,  113,  378,  415,  364,  363,  362,  415,
      361,  360,  359,  358,  356,  113,  114,  355,  353,  352,
      114,  350,  349,  347,  346,  114,  114,  114,  344,  343,
      341,  340,  339,  338,  337,  334,  332,  331,  330,  329,
      328,  327,  326,  325,  324,  323,  322,  321,  319,  318,
      317,  114,  130,  130,  130,  130,  130,  316,  315,  314,

      312,  311,  310,  309,  308,  307,  306,  305,  304,  130,
      134,  134,  134,  134,  134,  303,  302,  301,  300,  299,
      298,  297,  296,  295,  294,  293,  134,  135,  135,  135,
      135,  135,  290,  288,  287,  286,  285,  284,  283,  282,
      281,  280,  279,  135,  138,  138,  138,  138,  138,  278,
      277,  275,  273,  270,  269,  268,  267,  266,  265,  264,
      138,  139,  139,  139,  139,  139,  263,  261,  260,  259,
      258,  257,  256,  255,  254,  253,  252,  139,  140,  140,
      140,  140,  140,  251,  250,  249,  248,  245,  244,  243,
      240,  239,  238,  237,  140,  158,  158,  158,  158,  158,

      236,  233,  231,  230,  229,  228,  227,  226,  225,  224,
      223,  158,  159,  159,  159,  159,  159,  221,  220,  216,
      215,  213,  210,  209,  208,  207,  206,  204,  159,  163,
      163,  163,  163,  163,  203,  202,  201,  200,  199,  198,
      197,  196,  195,  193,  192,  163,  164,  164,  164,  164,
      164,  188,  187,  186,  183,  182,  179,  177,  176,  175,
      174,  173,  164,  165,  165,  165,  165,  165,  172,  171,
      170,  169,  166,  162,  161,  160,  157,  156,  154,  165,
      167,  152,  151,  150,  167,  149,  148,  147,  146,  167,
      167,  167,  145,  144,  141,  137,  136,  133,  132,  129,

      127,  125,  124,  123,  122,  121,  120,  119,  118,  117,
      110,  103,   99,   98,   97,  167,  184,  184,  184,  184,
      184,   95,   94,   93,   91,   90,   89,   83,   69,   67,
       61,   59,  184,  185,  185,  185,  185,  185,   55,   51,
       50,   43,   39,   37,   34,   31,   27,   26,   23,  185,
      189,  189,  189,  189,  189,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  189,  190,  190,  190,
      190,  190,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  190,  191,  191,  191,  191,  191,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      191,  211,  211,  211,  211,  211,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  211,  212,  212,
      212,  212,  212,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  212,  214,  214,  214,  214,  214,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  214,  217,  217,  217,  217,  217,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  217,  218,
      218,  218,  218,  218,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  218,  219,  219,  219,  219,
      219,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  219,  222,    0,    0,    0,  222,    0,    0,
        0,    0,  222,  222,  222,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  222,  241,
      241,  241,  241,  241,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  241,  242,  242,  242,  242,
      242,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  242,  246,  246,  246,  246,  246,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  246,
      247,  247,  247,  247,  247,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  247,  271,  271,  271,
      271,  271,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  271,  272,  272,  272,  272,  272,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      272,  274,  274,  274,  274,  274,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  274,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,

      399,  399,  399,  399,  399,  399,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  401,  401,    0,  401,  401,    0,  401,    0,
      401,  401,  401,    0,  401,  401,  401,  401,  405,  405,
      405,    0,    0,  405,  406,  406,  406,    0,  406,    0,
      406,  406,  406,  406,  406,  406,  406,  406,    0,  406,
      407,  407,  407,  407,  407,    0,    0,  407,  407,  407,
      407,  407,  407,  407,    0,  407,  408,  408,  408,  408,
      408,    0,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  409,  409,    0,    0,  409,  410,  410,    0,  410,

      410,    0,  410,    0,  410,  410,  410,    0,  410,  410,
      410,  410,  411,  411,    0,  411,  411,    0,  411,    0,
      411,  411,  411,    0,  411,  411,  411,  411,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  416,  416,    0,  416,  416,    0,
      416,    0,  416,  416,  416,    0,  416,  416,  416,  416,
      417,  417,    0,    0,    0,    0,    0,    0,  417,    0,
        0,  417,  417,  418,  418,    0,    0,    0,    0,    0,
        0,    0,    0,  418,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,

      420,  420,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  420,  421,  421,    0,    0,    0,    0,    0,    0,
        0,    0,  421,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  423,
      423,    0,    0,    0,    0,    0,    0,    0,    0,  423,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  425,  425,    0,    0,
        0,    0,    0,    0,    0,    0,  425,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  427,  427,    0,    0,    0,    0,    0,

        0,    0,    0,  427,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      429,  429,    0,    0,    0,    0,    0,    0,    0,    0,
      429,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "textparse.l"
#line 2 "textparse.l"
#include "flextest.h"










#line 874 "textparse.yy.cpp"

#define INITIAL 0
#define paragraph_text 1
#define paragraph_code 2
#define tag_name 3
#define tag_body 4
#define tag_attribute 5
#define tag_attribute_value 6
#define tag_attribute_expected 7
#define tag_attribute_doublestring 8
#define tag_attribute_singlestring 9
#define wiki_name_contents 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 40 "textparse.l"


#line 1019 "textparse.yy.cpp"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 397 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1332 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 42 "textparse.l"
{ return NEW_PARAGRAPH; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 43 "textparse.l"
{ BEGIN(paragraph_text); return ORDERED_LIST_ITEM; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 44 "textparse.l"
{ BEGIN(paragraph_text); return UNORDERED_LIST_ITEM; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 45 "textparse.l"
{ BEGIN(paragraph_text); return PARAGRAPH_TEXT; }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 46 "textparse.l"
{ BEGIN(paragraph_text); return PARAGRAPH_TEXT; }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 47 "textparse.l"
{ return HEADING1; }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 48 "textparse.l"
{ return HEADING2; }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 49 "textparse.l"
{ return HEADING3; }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 50 "textparse.l"
{ return HEADING4; }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 51 "textparse.l"
{ return HEADING5; }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 52 "textparse.l"
{ return HEADING6; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 54 "textparse.l"
{ yy_push_state(wiki_name_contents); return WIKI_OPEN; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 56 "textparse.l"
{ yy_pop_state(); return WIKI_CLOSE; }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 57 "textparse.l"
{ return PARAGRAPH_TEXT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 58 "textparse.l"
{ return PARAGRAPH_TEXT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 60 "textparse.l"
{ return NAMED_ENTITY; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 61 "textparse.l"
{ return NUMERIC_ENTITY; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 62 "textparse.l"
{ return HEX_NUMERIC_ENTITY; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 64 "textparse.l"
{ yy_push_state(tag_body); return TAG_OPEN; }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 65 "textparse.l"
{ return TAG_CLOSE; }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 67 "textparse.l"
{ }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 68 "textparse.l"
{ BEGIN(tag_attribute_value); return TAG_ATTRIBUTE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 69 "textparse.l"
{ BEGIN(tag_attribute_expected); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 70 "textparse.l"
{ BEGIN(tag_body); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 71 "textparse.l"
{ yy_pop_state(); return TAG_ATTRIBUTE_CLOSE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 72 "textparse.l"
{ yy_pop_state(); return TAG_CLOSE; }
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 75 "textparse.l"
BEGIN(tag_attribute_doublestring);
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 76 "textparse.l"
BEGIN(tag_attribute_singlestring);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 78 "textparse.l"
{ BEGIN(tag_body); return TAG_ATTRIBUTE_VALUE_CLOSED; }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 79 "textparse.l"
{return TAG_ATTRIBUTE_VALUE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "textparse.l"
{ BEGIN(tag_body); return TAG_ATTRIBUTE_VALUE_CLOSED; }
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 82 "textparse.l"
{return TAG_ATTRIBUTE_VALUE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 85 "textparse.l"
{return TAG_ATTRIBUTE_NAMED_ENTITY; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 86 "textparse.l"
{return TAG_ATTRIBUTE_NUMERIC_ENTITY; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 87 "textparse.l"
{return TAG_ATTRIBUTE_HEX_NUMERIC_ENTITY; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 91 "textparse.l"
ECHO;
	YY_BREAK
#line 1271 "textparse.yy.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(paragraph_text):
case YY_STATE_EOF(paragraph_code):
case YY_STATE_EOF(tag_name):
case YY_STATE_EOF(tag_body):
case YY_STATE_EOF(tag_attribute):
case YY_STATE_EOF(tag_attribute_value):
case YY_STATE_EOF(tag_attribute_expected):
case YY_STATE_EOF(tag_attribute_doublestring):
case YY_STATE_EOF(tag_attribute_singlestring):
case YY_STATE_EOF(wiki_name_contents):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 397 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 397 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 396);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 90 "textparse.l"
